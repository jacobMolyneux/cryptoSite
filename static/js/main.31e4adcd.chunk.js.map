{"version":3,"sources":["components/coinCard.js","components/dataTable.js","App.js","index.js"],"names":["CoinCard","props","useState","prices","setPrice","coinName","setCoinName","key","useEffect","a","fetch","coinCode","response","json","data","Number","toFixed","console","log","getData","id","DataTable","chartData","setChartData","ohlc","timeLabels","time","coinData","coinInfo","push","String","labels","datasets","label","reverse","backgroundColor","borderColor","borderWidth","Chart","getHistoricalData","options","scales","x","type","responsive","title","display","yAxes","ticks","beginAtZero","App","tableVisibility","setTableVisibility","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAKe,SAASA,EAASC,GAC/B,MAA2BC,mBAAS,MAApC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAgCF,mBAAS,MAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAM,mBAyBZ,OAvBAC,qBAAU,WAAM,4CAId,8BAAAC,EAAA,sEACyBC,MAAM,mFAAD,OACyDT,EAAMU,SAD/D,mCACkGJ,IAFhI,cACQK,EADR,gBAIqBA,EAASC,OAJ9B,OAIQC,EAJR,OAQEV,EACEW,OACED,EAAK,mCAAmC,qBACxCE,QAAQ,IAEZV,EACEQ,EAAK,mCAAmC,0BAE1CG,QAAQC,IAAIJ,EAAK,oCAhBnB,4CAJc,0DACdK,KAqBC,IAED,sBAAKC,GAAG,gBAAR,UACE,qBAAIA,GAAG,OAAP,cAAgBf,KAChB,oBAAGe,GAAG,eAAN,qBAA8BjB,Q,2BC/B9BkB,EAAY,WAChB,MAAkCnB,mBAAS,IAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KAEMhB,EAAM,mBAGRiB,EAAO,GACPC,EAAa,GA8CjB,OA5CAjB,qBAAU,WAAM,4CAEd,oCAAAC,EAAA,sEACyBC,MAAM,kGAAD,OACwEH,IAFtG,cACQK,EADR,gBAIqBA,EAASC,OAJ9B,OASE,IAASa,KALHZ,EAJR,OAKEG,QAAQC,IAAI,uBACZD,QAAQC,IAAIJ,EAAK,yCACba,EAAWb,EAAK,wCAGdc,EAAWD,EAASD,GACxBD,EAAWI,KAAKC,OAAOJ,IACvBF,EAAKK,KAIHd,OAAOa,EAAS,qBAIpBX,QAAQC,IAAR,yBACAD,QAAQC,IAAIM,GACZP,QAAQC,IAAI,0BACZD,QAAQC,IAAIO,GACE,WACZF,EAAa,CACXQ,OAAQN,EACRO,SAAU,CACR,CACEC,MAAO,YACPnB,KAAMU,EAAKU,UACXC,gBAAiB,CAAC,2BAClBC,YAAa,CAAC,yBACdC,YAAa,MAKrBC,GAtCF,6CAFc,0DACdC,KAyCC,IAGD,sBAAKnB,GAAG,qBAAR,UACE,oBAAIA,GAAG,cAAP,uBACA,qBAAKA,GAAG,iBAAR,SACE,cAAC,IAAD,CACEN,KAAMQ,EACNkB,QAAO,aACLC,OAAQ,CACNC,EAAG,CACDC,KAAM,SAGVC,YAAY,EACZC,MAAO,kBACPC,SAAS,GARJ,SASG,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,eCvElB,SAASC,IACtB,MAA4ChD,oBAAS,GAArD,mBAAKiD,EAAL,KAAsBC,EAAtB,KACA,OAAwB,IAApBD,EAEA,sBAAK/B,GAAG,MAAR,UACE,qBAAKA,GAAG,aAAR,SACE,8CAEF,+VAOA,sBAAKA,GAAG,uBAAR,UACE,sBAAKA,GAAG,qBAAR,UACE,cAACpB,EAAD,CAAUW,SAAS,QACnB,cAACX,EAAD,CAAUW,SAAS,WAErB,wBACES,GAAG,YACHiC,QAAS,kBAAMD,EAAoBD,GAAkB,IAFvD,wBAMA,cAAC,EAAD,UAMJ,sBAAK/B,GAAG,MAAR,UACE,qBAAKA,GAAG,aAAR,SACE,8CAGF,sBAAKA,GAAG,qBAAR,UACE,cAACpB,EAAD,CAAUW,SAAS,QACnB,cAACX,EAAD,CAAUW,SAAS,QAEnB,yBACES,GAAG,YACHiC,QAAS,kBAAMD,EAAoBD,GAAkB,IAFvD,UAIG,IAJH,sBC1CVG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.31e4adcd.chunk.js","sourcesContent":["import \"./stylesheets/coincard.css\";\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function CoinCard(props) {\n  const [prices, setPrice] = useState(null);\n  const [coinName, setCoinName] = useState(null);\n  const key = \"8C2R26DMRMVREBOX\";\n\n  useEffect(() => {\n    getData();\n\n    // this will fetch the data\n    async function getData() {\n      const response = await fetch(\n        `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${props.coinCode}&to_currency=USD&apikey=${key}`\n      );\n      const data = await response.json();\n      // console.log(data[\"Realtime Currency Exchange Rate\"]);\n\n      // store the data in the price state\n      setPrice(\n        Number(\n          data[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"]\n        ).toFixed(2)\n      );\n      setCoinName(\n        data[\"Realtime Currency Exchange Rate\"][\"2. From_Currency Name\"]\n      );\n      console.log(data[\"Realtime Currency Exchange Rate\"]);\n    }\n  }, []);\n  return (\n    <div id=\"cardContainer\">\n      <h1 id=\"name\"> {coinName}</h1>\n      <p id=\"priceDisplay\">Price: ${prices}</p>\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nimport \"./stylesheets/dataTable.css\";\nimport { Line } from \"react-chartjs-2\";\n\nconst DataTable = () => {\n  const [chartData, setChartData] = useState({});\n\n  const key = \"8C2R26DMRMVREBOX\";\n\n  // ohlc is an Open, high, low, close array in that format\n  let ohlc = [];\n  let timeLabels = [];\n\n  useEffect(() => {\n    getHistoricalData();\n    async function getHistoricalData() {\n      const response = await fetch(\n        `https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol=BTC&market=USD&apikey=${key}`\n      );\n      const data = await response.json();\n      console.log(\"historical Data is:\");\n      console.log(data[\"Time Series (Digital Currency Daily)\"]);\n      let coinData = data[\"Time Series (Digital Currency Daily)\"];\n\n      for (var time in coinData) {\n        var coinInfo = coinData[time];\n        timeLabels.push(String(time));\n        ohlc.push(\n          // Number(coinInfo[\"1a. open (USD)\"]),\n          // Number(coinInfo[\"2a. high (USD)\"]),\n          // Number(coinInfo[\"3a. low (USD)\"]),\n          Number(coinInfo[\"4a. close (USD)\"])\n        );\n      }\n\n      console.log(`the ohlc values are: `);\n      console.log(ohlc);\n      console.log(\" the time labels are: \");\n      console.log(timeLabels);\n      const Chart = () => {\n        setChartData({\n          labels: timeLabels,\n          datasets: [\n            {\n              label: \"CoinPrice\",\n              data: ohlc.reverse(),\n              backgroundColor: [\"rgba(255, 99, 132, 0.2)\"],\n              borderColor: [\"rgba(255, 99, 132, 1)\"],\n              borderWidth: 1,\n            },\n          ],\n        });\n      };\n      Chart();\n    }\n  }, []);\n\n  return (\n    <div id=\"DataTableContainer\">\n      <h1 id=\"NameDisplay\"> Bitcoin </h1>\n      <div id=\"graphContainer\">\n        <Line\n          data={chartData}\n          options={{\n            scales: {\n              x: {\n                type: \"time\",\n              },\n            },\n            responsive: true,\n            title: \"Thiccness Scale\",\n            display: true,\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true,\n                  },\n                },\n              ],\n            },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport { DataTable };\n","import \"./App.css\";\n\nimport CoinCard from \"./components/coinCard.js\";\nimport { useState } from \"react\";\nimport { DataTable } from \"./components/dataTable\";\n\nexport default function App() {\n  let [tableVisibility, setTableVisibility] = useState(false);\n  if (tableVisibility === true) {\n    return (\n      <div id=\"App\">\n        <div id=\"siteBanner\">\n          <h1>Panopticon</h1>\n        </div>\n        <p>\n          A Note: If the data is not loading there may be an issue with the\n          number of requests being made per minute. AlphaVantage only allows 5\n          requests/min so you may need to wait a minute before it functions\n          properly. This is also why there are only 2 coins that can be used\n          other wise the application exceeds the rate limit.\n        </p>\n        <div id=\"dataDisplayContainer\">\n          <div id=\"CoinCardsContainer\">\n            <CoinCard coinCode=\"BTC\" />\n            <CoinCard coinCode=\"ETH\" />\n          </div>\n          <button\n            id=\"showTable\"\n            onClick={() => setTableVisibility((tableVisibility = false))}\n          >\n            Hide Table\n          </button>\n          <DataTable />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div id=\"App\">\n        <div id=\"siteBanner\">\n          <h1>Panopticon</h1>\n        </div>\n\n        <div id=\"CoinCardsContainer\">\n          <CoinCard coinCode=\"BTC\" />\n          <CoinCard coinCode=\"ETH\" />\n\n          <button\n            id=\"showTable\"\n            onClick={() => setTableVisibility((tableVisibility = true))}\n          >\n            {\" \"}\n            Show Table\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}